import React from 'react';

import Head from 'next/head';
import styles from '../styles/Home.module.css';

import { PDFDocument } from 'pdf-lib';

export default function PDFJS() {
	return (
		<div className={styles.container}>
			<Head>
				<title>PDFJS</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<MyComponent initialDoc="Consent for treatment.pdf" />
		</div>
	);
}

const MyComponent = ({ initialDoc }) => {
	const viewer = React.useRef();
	const [updatedPdf, setUpdatedPdf] = React.useState(initialDoc);
	const [formFields, setFormFields] = React.useState({});

	async function handlePdfChange(field, value) {
		console.log('Field changed: ' + field.name + ', ' + value);
		setFormFields(prev => ({ ...prev, [field.name]: value }));
	}

	React.useEffect(() => {
		import('@pdftron/pdfjs-express').then(() => {
			WebViewer(
				{
					path: '/pdfjsexpress',
					initialDoc,
				},
				viewer.current
			).then(instance => {
				const { annotationManager, documentViewer } = instance.Core;

				annotationManager.addEventListener('fieldChanged', handlePdfChange);
			});
		});
	}, []);

	async function flattenForm() {
		console.log(formFields);
		const pdfBuffer = await fetch(initialDoc).then(res => res.arrayBuffer());
		const pdfDoc = await PDFDocument.load(pdfBuffer);
		const form = pdfDoc.getForm();
		const fields = form.getFields();
		fields.forEach(field => {
			const type = field.constructor.name;
			const name = field.getName();
			console.log(`${type}: ${name}`);
			if (type === 'PDFTextField') {
				const field = form.getTextField(name);
				field.setText(formFields[name]);
			}
		});

		form.flatten();
		const pdfBytes = await pdfDoc.save();
		console.log(pdfBytes);
		setUpdatedPdf(pdfBytes);
	}

	return (
		<div style={{ boxSizing: 'border-box' }}>
			<h1>PDFJS-EXPRESS</h1>
			<div
				className="webviewer"
				ref={viewer}
				style={{ height: '80vh', width: '50%', display: 'inline-block' }}
			></div>
			<iframe
				src={URL.createObjectURL(
					new Blob([updatedPdf], { type: 'application/pdf' })
				)}
				style={{
					border: 'none',
					height: '80vh',
					width: '50%',
					display: 'inline-block',
				}}
			></iframe>
			<button onClick={flattenForm}>FLATTEN</button>
		</div>
	);
};
