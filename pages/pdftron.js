import React from 'react';
import { PDFDocument } from 'pdf-lib';

import Head from 'next/head';
import styles from '../styles/Home.module.css';

export default function PDFTRON() {
	return (
		<div className={styles.container}>
			<Head>
				<title>PDF</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<MyComponent initialDoc="Consent for treatment.pdf" />
		</div>
	);
}

const MyComponent = ({ initialDoc }) => {
	const viewer = React.useRef(null);
	const [updatedPdfBuffer, setUpdatedPdfBuffer] = React.useState();

	React.useEffect(() => {
		import('@pdftron/webviewer').then(() => {
			WebViewer(
				{
					path: '/webviewer',
					initialDoc,
				},
				viewer.current
			).then(instance => {
				setViewerInstance(instance);
				const { documentViewer, annotationManager } = instance.Core;

				// Add header button that will get file data on click
				instance.UI.setHeaderItems(header => {
					header.push({
						type: 'actionButton',
						img: 'ic-operation-export-line',
						onClick: async () => {
							const doc = documentViewer.getDocument();
							const xfdfString = await annotationManager.exportAnnotations();
							const buffer = await doc.getFileData({
								xfdfString,
							});
							const uint8arr = new Uint8Array(buffer);

							// USE PDFLIB TO FLATTEN FORM (PDFTRON PAID)
							const pdfDoc = await PDFDocument.load(uint8arr);
							const form = pdfDoc.getForm();
							form.flatten();
							const pdfBytes = await pdfDoc.save();
							setUpdatedPdfBuffer(pdfBytes);

							// const blob = new Blob([uint8arr], { type: 'application/pdf' });
						},
					});
				});
			});
		});
	}, []);

	return (
		<div style={{ boxSizing: 'border-box' }}>
			<h1>PDFTRON: flatten unsupported (paid), used pdflib to flatten form</h1>
			<div
				ref={viewer}
				style={{ height: '80vh', width: '50%', display: 'inline-block' }}
			></div>
			<iframe
				src={
					updatedPdfBuffer
						? URL.createObjectURL(
								new Blob([updatedPdfBuffer], { type: 'application/pdf' })
						  )
						: initialDoc
				}
				style={{
					border: 'none',
					height: '80vh',
					width: '50%',
					display: 'inline-block',
				}}
			></iframe>
		</div>
	);
};
