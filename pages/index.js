import React from 'react';

import Head from 'next/head';
import styles from '../styles/Home.module.css';

export default function Home() {
	const { error, loading, pdfUrl, pdfBuffer } =
		useFetchPdf('/new_document.pdf');

	const [result, setResult] = React.useState('/new_document.pdf');

	async function handlePdf() {
		console.log('handling');
		console.log('new buffer: ');

		// load the pdf
		const pdfDoc = await PDFDocument.load(pdfBuffer);

		// get the form
		const form = pdfDoc.getForm();
		console.log('form: ', form);

		// flatten the pdf
		form.flatten;

		const pdfUint = await pdfDoc.save();
		console.log(pdfUint);
		const pdfUrl = URL.createObjectURL(
			new Blob([pdfUint], { type: 'application/pdf' })
		);
		setResult(pdfUrl);
	}

	function handlePdfChange() {
		console.log('changing');
	}

	return (
		<div className={styles.container}>
			<Head>
				<title>PDF</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			{loading ? (
				'Loading..'
			) : error ? (
				error
			) : (
				<>
					<h3>RECIEVED</h3>
					<PDFView pdfUrl={'/new_document.pdf'} onChange={handlePdfChange} />

					<button onClick={handlePdf}>Handle PDF</button>

					<h3>NEW</h3>
					<PDFView pdfUrl={result} />
				</>
			)}
		</div>
	);
}

import { PDFDocument } from 'pdf-lib';

function PDFView({ pdfUrl, onChange }) {
	return (
		<iframe src={pdfUrl} style={{ width: '100%', height: '30vh' }}></iframe>
	);
}

function useFetchPdf(url) {
	const [loading, setLoading] = React.useState(false);
	const [error, setError] = React.useState('');
	const [pdfBuffer, setPdfBuffer] = React.useState();
	const [pdfUrl, setPdfUrl] = React.useState();

	React.useEffect(() => {
		async function fetchPdf(url) {
			setError(false);
			setLoading(true);
			try {
				const response = await fetch(url);
				const data = await response.arrayBuffer();
				setPdfBuffer(data);
				console.log(data);
			} catch (err) {
				setError(err.message);
			} finally {
				setLoading(false);
			}
		}

		fetchPdf(url);
	}, []);

	return { error, loading, pdfUrl };
}
